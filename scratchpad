




def appliance_anomaly_result(test_day,area_stat,device): # area_stat stores training models results
    """ function called by localize_anomalous_appliance,
    used at testing time """
    #print "start:"+device+":"+test_day.index.date[0].strftime('%d/%m/%Y')
    test_res = cluster_appliance_testing_stage(test_day)
    test_res = test_res.sort_values(by='mean_mag',ascending=True)
    test_res = test_res.reset_index(drop=True)
    area_stat = area_stat[device]
    for i in range(area_stat.shape[0]):
        if(test_res.loc[i].mean_area <= area_stat.loc[i].mean_area - 1.5 * area_stat.loc[i].sd_area):
            print device + "Frequent Anomaly on " + np.unique(test_day.index.date)[0].strftime('%d/%m/%Y')
        elif(test_res.loc[i].mean_area >= area_stat.loc[i].mean_area + 1.5 * area_stat.loc[i].sd_area):
            print device + "Elongated Anomaly on " + np.unique(test_day.index.date)[0].strftime('%d/%m/%Y')





train_result = compute_appliance_statistic(train_dset,context=True) # training
